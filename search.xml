<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>podman容器</title>
      <link href="/2025/05/28/rong-qi-ji-zhu/podman-rong-qi/"/>
      <url>/2025/05/28/rong-qi-ji-zhu/podman-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-容器的概念"><a href="#1-容器的概念" class="headerlink" title="1 容器的概念"></a>1 容器的概念</h1><h2 id="1-1-容器技术介绍"><a href="#1-1-容器技术介绍" class="headerlink" title="1.1 容器技术介绍"></a>1.1 容器技术介绍</h2><p>  软件应用通常依赖于运行时环境(runtimeenvironment)提供的系统库、配置文件或服务</p><p>  传统软件应用的运行时环境安装在物理主机或虚拟机上运行的操作系统中。然后，管理员在操作系统上安装应用依赖项</p><p>  在红帽企业Linux中，诸如RPM等打包系统可协助管理员管理应用依赖项。安装httpd软件包时，RPM系统会确保同时安装该软件包的正确库和其他依赖项</p><p>  传统方式部署软件应用的主要弊端是这些依赖项会受到运行时环境的束缚，应用需要的支持软件的版本可能比操作系统提供的软件更旧或更新，同一系统上的两个应用可能需要同一软件互不兼容的不同版本，解决这些冲突的方式之一是将应用打包并作为容器进行部署</p><p>  容器是由一个或多个与系统其余部分隔离的进程组成的集合，软件容器是打包应用以简化其部署和管理的一种方式</p><p>  以实体集装箱为例。集装箱是打包和装运货物的标准方式。作为一个箱子进行标记、装载、卸载，以及从一个位置运输到另一个位置。集装箱中的内容与其他集装箱的内容隔离，因此互不影响。这些基本原则也适用于软件容器</p><h2 id="1-2-容器技术的核心"><a href="#1-2-容器技术的核心" class="headerlink" title="1.2 容器技术的核心"></a>1.2 容器技术的核心</h2><p>  红帽企业Linux通过运用以下核心技术来支持容器:</p><p>   1.用于资源管理的控制组(cgroups)</p><p>   2.用于进程隔离的命名空间</p><p>   3.加强安全边界的SELinux和Seccomp安全计算模式</p><h2 id="1-3-容器和虚拟机的差异"><a href="#1-3-容器和虚拟机的差异" class="headerlink" title="1.3 容器和虚拟机的差异"></a><strong>1.3 容器和虚拟机的差异</strong></h2><p>  1.容器提供许多与虚拟机相同的益处，如安全、存储和网络隔离等</p><p>  2.这两种技术都将其应用库和运行时资源与主机操作系统或虚拟机监控程序隔离开</p><p>  3.容器和虚拟机以不同的方式与硬件和底层操作系统交互</p><p>  4.虚拟机具有以下特征:</p><p>   4.1 使多个操作系统能够同时在一个硬件平台上运行</p><p>   4.2 使用虚拟机监控程序将硬件分为多个虚拟硬件系统</p><p>   4.3 需要一个完整的操作系统环境来支持该应用</p><p>  5.容器具有以下特征:</p><p>   5.1 直接在操作系统上运行，从而跨系统上的所有容器共享资源</p><p>   5.2 共享主机的内核，但它将应用进程与系统其余部分隔离开来</p><p>   5.3 与虚拟机相比，它需要的硬件资源要少得多，因此容器的启动速度也更快</p><p>   5.4 包括所有依赖项，如系统和编程依赖项，以及配置设置</p><h2 id="1-4-Rootless和Rootful容器"><a href="#1-4-Rootless和Rootful容器" class="headerlink" title="1.4 Rootless和Rootful容器"></a><strong>1.4 Rootless和Rootful容器</strong></h2><p>  在容器主机上，特权用户运行的容器称为Rootful容器、非特权用户运行的容器称为Rootless容器</p><p>  Rootless容器不允许使用通常为特权用户保留的系统资源，例如访问受限目录、在受限端口(1024以下的端口)上发布网络服务，此功能可防止潜在攻击者获取容器主机上的root特权</p><p>  可使用root用户身份直接运行容器，但如果有漏洞允许攻击者破坏容器，这样做会削弱系统的安全性</p><h2 id="1-5-设计基于容器的架构"><a href="#1-5-设计基于容器的架构" class="headerlink" title="1.5 设计基于容器的架构"></a><strong>1.5 设计基于容器的架构</strong></h2><p>  容器是重复利用托管应用并使其可以移植的有效方式</p><p>  容器可以轻松地从一个环境迁移到另一个环境，如从开发环境迁移到生产环境</p><p>  可以保存一个容器的多个版本，并根据需要快速访问每个版本</p><p>  容器通常是临时的，可将运行中容器所生成的数据永久保存到持久存储中，但容器本身通常会在需要时运行，然后停止并被删除，下次需要该特定容器时，将启动新的容器进程</p><p>  可以在单个容器中安装含有多个服务的复杂软件应用。例如，Web服务器可能需要使用数据库和消息传递系统。不过，将一个容器用于多个服务会难以管理</p><p>  更好的设计是在单独的容器中运行每个组件、Web服务器、数据库和消息传递系统。这样，更新和维护单个应用组件不会影响其他组件或应用堆栈</p><h1 id="2-容器镜像和注册表"><a href="#2-容器镜像和注册表" class="headerlink" title="2 容器镜像和注册表"></a>2 容器镜像和注册表</h1><p>  运行容器必须使用容器镜像：</p><p>  1.容器镜像是包含编码步骤的静态文件，充当创建容器的蓝图</p><p>  2.容器镜像打包应用及其所有依赖项，如系统库、编程语言运行时和库以及其他配置设置</p><p>  3.容器镜像根据规范构建，如开放容器项目(OCI)镜像格式规范。这些规范定义容器镜像的格式，以及镜像支持的容器主机操作系统和硬件架构的元数据</p><p>  4.容器注册表是用于存储和检索容器镜像的存储库。开发人员将容器镜像推送或上传到容器注册表中，可以从注册表中将这些容器镜像拉取或下载到本地系统，以用于运行容器。可使用包含第三方镜像的公共注册表，也可使用贵组织控制的私有注册表</p><p>  5.容器镜像来源很重要。和任何其他软件包一样，必须知道是否可以信任容器镜像中的代码。对于是否及如何提供、评估和测试提交给它们的容器镜像，不同的注册表具有不同的策略</p><p>  红帽通过两个主容器注册表分发认证容器镜像，可以使用红帽登录凭据来访问这两个注册表:</p><p>  1.utility.redhat.io: 适用于基于官方红帽产品的容器</p><p>  2.utilityconnect.redhat,com:适用于基于第三方产品的容器</p><p>  3.红帽容器目录(<a href="https://access.redhat.com/containers)%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EWeb%E7%9A%84%E7%95%8C%E9%9D%A2%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%83%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E8%BF%99%E4%BA%9B%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%AE%A4%E8%AF%81%E5%86%85%E5%AE%B9">https://access.redhat.com/containers)提供了一个基于Web的界面，通过它可以搜索这些注册表中的认证内容</a></p><h2 id="2-1-安装容器"><a href="#2-1-安装容器" class="headerlink" title="2.1 安装容器"></a>2.1 安装容器</h2><p>  使用的镜像仓库浏览器访问为: <a href="https://utility/">https://utility</a> 账号&amp;密码是:admin/redhat321</p><p>  镜像对应的地址为:utility.lab.example.com</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[kiosk@foundation0 ~]$ <span class="built_in">cat</span> /etc/hosts</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"><span class="comment">### rht-vm-hosts file listing the entries to be appended to /etc/hosts</span></span><br><span class="line"></span><br><span class="line">172.25.250.254 bastion.lab.example.com bastion</span><br><span class="line">172.25.250.10  servera.lab.example.com servera</span><br><span class="line">172.25.250.11  serverb.lab.example.com serverb</span><br><span class="line">172.25.250.220 utility.lab.example.com utility</span><br><span class="line">172.25.250.9   workstation.lab.example.com workstation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录servera请使用ssh方式，不要使用su切换。</span></span><br><span class="line">[root@foundation0 ~]# ssh root@servera</span><br><span class="line">[root@servera ~]# ssh student@localhost</span><br><span class="line">[student@servera ~]$ <span class="built_in">sudo</span> dnf -y install container-tools    <span class="comment"># 安装podman容器 </span></span><br><span class="line">[student@servera ~]$ podman --version</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-登录容器"><a href="#2-2-登录容器" class="headerlink" title="2.2 登录容器"></a>2.2 登录容器</h2><p>  需要红帽开发人员账户才能从红帽注册表下载镜像。可以使用podman login命令对注册表进行身份验证。如果不向podman login命令提供注册表URL，它会向默认配置的注册表进行身份验证</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ podman login --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录方法一(交互)：</span></span><br><span class="line">$ podman login utility.lab.example.com </span><br><span class="line">Username: admin</span><br><span class="line">Password: redhat321</span><br><span class="line">Login Succeeded!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录方法二(非交互)： #</span></span><br><span class="line">$ podman login utility.lab.example.com -u admin -p redhat321  <span class="comment"># 生产环境中是有https验证的</span></span><br><span class="line">Login Succeeded!</span><br><span class="line"></span><br><span class="line">[student@servera ~]$ podman login -u admin -p redhat321 utility.lab.example.com</span><br><span class="line">Error: authenticating creds <span class="keyword">for</span> <span class="string">"utility.lab.example.com"</span>: pinging container registry utility.lab.example.com: Get <span class="string">"https://utility.lab.example.com/v2/"</span>: tls: failed to verify certificate: x509: certificate is not valid <span class="keyword">for</span> any names, but wanted to match utility.lab.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现以上报错，是要求https验证，需要通过选项--tls-verify进行手动关闭</span></span><br><span class="line">$ podman login utility.lab.example.com -u admin -p redhat321 --tls-verify=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[student@servera ~]$ podman login --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">[student@servera ~]$ podman login -u admin -p redhat321 utility.lab.example.com --tls-verify=<span class="literal">false</span></span><br><span class="line">Login Succeeded!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录方法三(非交互):</span></span><br><span class="line"><span class="comment"># 使用podman login命令的--username和--password-sdtin选项，指定用于登录注册表的用户和密码</span></span><br><span class="line"><span class="comment"># --password-stdin选项从stdin读取密码</span></span><br><span class="line"><span class="comment"># 红帽建议不要使用--password选项直接提供密码，因为此选项会将密码存储在日志文件中</span></span><br><span class="line">$ <span class="built_in">echo</span> redhat321 | podman login -u admin --password-stdin utility.lab.example.com  </span><br><span class="line">Login Succeeded!</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-验证容器的登录"><a href="#2-3-验证容器的登录" class="headerlink" title="2.3 验证容器的登录"></a>2.3 验证容器的登录</h2><p>  要验证是否已登录到某一注册表，请使用 podman login命令的–get-login选项</p><p>  退出登录：podman logout</p>]]></content>
      
      
      <categories>
          
          <category> 容器技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> podman容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器&amp;K8S</title>
      <link href="/2025/05/28/kubernetes/rong-qi-k8s/"/>
      <url>/2025/05/28/kubernetes/rong-qi-k8s/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微服务"><a href="#1-微服务" class="headerlink" title="1 微服务"></a>1 微服务</h1><p>  把一个庞大的应用拆成几个小的独立的服务，再把独立的服务串起来的一种架构设计:内聚更强，更加敏捷</p><p><img src="/images/%E5%BE%AE%E6%9C%8D%E5%8A%A1.png"></p><h2 id="1-1-应用架构的发展"><a href="#1-1-应用架构的发展" class="headerlink" title="1.1 应用架构的发展"></a>1.1 应用架构的发展</h2><p><img src="/images/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8F%91%E5%B1%95.png"></p><h2 id="1-2-传统单体架构vs微服务软件架构"><a href="#1-2-传统单体架构vs微服务软件架构" class="headerlink" title="1.2 传统单体架构vs微服务软件架构"></a>1.2 传统单体架构vs微服务软件架构</h2><p>  不同于微服务，传统的项目会包含很多功能，是一个大而全的“超级”工程</p><p>  例如：以普通架构方式实现的电商平台包含：登录、权限、会员、商品库存、订单、收藏、关注、购物车等功能的多个单一项目。随着项目业务越来越复杂、开发人员越来越多，相应开发、编译、部署、技术扩展、水平扩展都会受到限制</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器&amp;K8S </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
